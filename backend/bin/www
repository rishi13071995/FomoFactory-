const http = require("http")
const mongoose = require("mongoose")
const app = require("../app")
const stockModel = require("../models/stock")


const normalizePort = (val) => {
    const port = parseInt(val, 10)

    if(isNaN(port)) {
        return val
    }

    if(port >= 0) {
        return port
    }
    return false
 }

 const port = normalizePort(process.env.PORT || "3000")
 app.set("port", port)

 const server = http.createServer(app)
 server.setTimeout(120000)

 const onError = (error) => {
    if (error.syscall !== "listen") {
        throw error
    }
    const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`
    switch (error.code) {
        case "EACCES":
            console.log(`${bind} requires elevated privilieges`)
            process.exit(1)
            break
        case "EADDRINUSE":
            console.error(`${bind} is already in use`)
        default:
            throw error
    }
 }

 const onListening = () => {
    const addr = server.address()
    const bind = typeof port === "string" ? `pipe ${port}` : `port ${port}` 
    console.info(`Server listing on ${bind}`)
}

const onStockTrigger = async () => {
    try {
        const reqBody = {"currency":"USD","sort":"rank","order":"ascending","offset":0,"limit":5,"meta":false}

        const stockRes = await fetch(`${process.env.STOCK_API_URL}/coins/list`, {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json',
            'x-api-key': 'ffa15907-be98-488a-bd50-8379be09461e'
            },
            body: JSON.stringify(reqBody)
        })
        const jsonRes = await stockRes.json()
        await stockModel.create(jsonRes)
        console.log("Stocks data sucessfully inserted !!")
    } catch(error) {
        console.error("Error ->", error)
    }
}

const main = async () => {
    try {
        mongoose.Promise = global.Promise
        mongoose.set("strictQuery", false)
        await mongoose.connect(process.env.MONGODB_CONNECTION_STRING, {ssl: true})
        console.info("Connected ")
        setInterval(()=> {
            onStockTrigger()
        },5000)
    } catch(error) {
        console.error(`Failed to connect to Mongo DB via mongoose: ${error.message}`)
    } finally {
        server.listen(port)
        server.on("error", onError)
        server.on("listening", onListening)
    }
}

main()